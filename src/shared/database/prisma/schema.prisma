// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  ADMIN
  STUDENT
  TEACHER
  INSTITUTION
}

model User {
  id    String @default(uuid()) @id
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  deletedAt DateTime?

  email String  @unique
  name  String?
  dni   String  @unique
  role  Role

  student Student?
  teacher Teacher?
}


model Author {
  id        String   @default(uuid()) @id
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  deletedAt DateTime?

  name String
  biography String?
  imageUrl  String?

  //relations
  bookAuthor BookAuthor[]
}

model Student {
  id        String   @default(uuid()) @id
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  deletedAt DateTime?

  user   User   @relation(fields: [userId], references: [id])
  userId String @unique
}

model Institution {
  id        String   @default(uuid()) @id
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  deletedAt DateTime?

  name String
  address String
  phone String
  email String @unique

  //relations
  InstitutionCourse InstitutionCourse[]
}

model Course {
  id        String   @default(uuid()) @id
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  deletedAt DateTime?

  name String

  //relations
  InstitutionCourse InstitutionCourse[]
  TeacherCourse TeacherCourse[]
  BookCourse BookCourse[]
}


model InstitutionCourse {
  id        String   @default(uuid()) @id
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  deletedAt DateTime?

  institutionId String
  courseId String

  //relations
  institution Institution @relation(fields: [institutionId], references: [id])
  course Course @relation(fields: [courseId], references: [id])
}


model Teacher {
  id        String   @default(uuid()) @id
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  deletedAt DateTime?

  user   User   @relation(fields: [userId], references: [id])
  userId String @unique
  teacherCourse TeacherCourse[]
}

model TeacherCourse {
  id        String   @default(uuid()) @id
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  deletedAt DateTime?

  teacherId String
  courseId String

  //relations
  teacher Teacher @relation(fields: [teacherId], references: [id])
  course Course @relation(fields: [courseId], references: [id])
}

model Book {
  id        String   @default(uuid()) @id
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  deletedAt DateTime?

  name String
  description String
  imageUrl String
  animationFolderName String
  is3dEnabled Boolean
  releaseDate DateTime?

  //relations
  bookCourse BookCourse[]
  bookAuthor BookAuthor[]
  bookCategory BookCategory[]
}

model BookCourse {
  id        String   @default(uuid()) @id
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  deletedAt DateTime?

  bookId String
  courseId String

  //relations
  book Book @relation(fields: [bookId], references: [id])
  course Course @relation(fields: [courseId], references: [id])
}

model BookAuthor {
  id        String   @default(uuid()) @id
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  deletedAt DateTime?

  bookId String
  authorId String

  //relations
  book Book @relation(fields: [bookId], references: [id])
  author Author @relation(fields: [authorId], references: [id])
}

model Category {
  id        String   @default(uuid()) @id
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  deletedAt DateTime?

  name String

  //relations
  bookCategory BookCategory[]
}

model BookCategory {
  id        String   @default(uuid()) @id
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  deletedAt DateTime?

  bookId String
  categoryId String

  //relations
  book Book @relation(fields: [bookId], references: [id])
  category Category @relation(fields: [categoryId], references: [id])
}